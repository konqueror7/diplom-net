form="add-sessions-form"-> formData.append(sessionsArray)-> options.data -> Session.create(options.data[session])->session.php->sessions.json

Продумать переход на fetch с XMLHttpRequest
https://learn.javascript.ru/fetch


Для авторизации применяется метод User.login(), он обращается к login.php, который
1. стартует сессию session_start()
2. Сверяет логин и пароль с информацией в users.json
При получении response.success = true и response.user метод User.login():
1. Запускает this.setCurrent(response.user), который создает в localStorage записи user и role.

При входе на страницу /admin происходит
1. Проверка открытия сессии session_start() и содержания в ней информации о текущем пользователе User.fetch()
2. Если в сессии нет записи о текущем пользователе и у него role != 'admin', то редирект на страницу /client
3. Если наоборот - происходит запуск всех js-скриптов страницы

При нажатии кнопки "ОТКРЫТЬ ПРОДАЖУ БИЛЕТОВ":
1. User.logout() должен обращаться к logout.php чтобы закрыть сессию с помощью session_destroy()
получать response и при условии (response && response.success === true && response.user === undefined)
удалять из localStorage запись user
2. Переадресация на страницу /client


user.fetch() проверяет через php session_start() и содержимое $_SESSION
если сессия закрыта и массив пуст - очистка страницы функцией clear(), localStorage и перенаправление на страницу /client
иначе - инициализация страницы и ее виджетов.

//Продумать размещение страницы client на той же странице

Разместить форму авторизации на странице admin

Для информации о сеансах фильма сначала по его id извлекаются все записи о сеансах из session.json
Далее извлекаются записи о всех кинозалах из halls.json. С помощью for ... in производится фильтрация
списка сеансов по всем кинозалам с созданием списка сеансов фильма в текущем кинозале.
Если он не пуст в этой же итерации создается контейнер класса "movie-seances__hall"
в который производится вывод времени сеансов в виде ссылок на страницы бронирования места
в зале на выбранный сеанс
